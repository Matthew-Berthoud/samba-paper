
@article{anati_innovative_nodate,
	title = {Innovative {Technology} for {CPU} {Based} {Attestation} and {Sealing}},
	abstract = {Intel is developing the Intel® Software Guard Extensions (Intel® SGX) technology, an extension to Intel® Architecture for generating protected software containers. The container is referred to as an enclave. Inside the enclave, software’s code, data, and stack are protected by hardware enforced access control policies that prevent attacks against the enclave’s content. In an era where software and services are deployed over the Internet, it is critical to be able to securely provision enclaves remotely, over the wire or air, to know with confidence that the secrets are protected and to be able to save secrets in non-volatile memory for future use.},
	language = {en},
	author = {Anati, Ittai and Gueron, Shay and Johnson, Simon P and Scarlata, Vincent R},
	file = {PDF:/Users/matthewberthoud/zotero/storage/BNZGWXAI/Anati et al. - Innovative Technology for CPU Based Attestation and Sealing.pdf:application/pdf},
}

@article{coker_principles_2011,
        title = {Principles of remote attestation},
        volume = {10},
        issn = {1615-5270},
        url = {https://doi.org/10.1007/s10207-011-0124-7},
        doi = {10.1007/s10207-011-0124-7},
        abstract = {Remote attestation is the activity of making a claim about properties of a target by supplying evidence to an appraiser over a network. We identify five central principles to guide development of attestation systems. We argue that (i) attestation must be able to deliver temporally fresh evidence; (ii) comprehensive information about the target should be accessible; (iii) the target, or its owner, should be able to constrain disclosure of information about the target; (iv) attestation claims should have explicit semantics to allow decisions to be derived from several claims; and (v) the underlying attestation mechanism must be trustworthy. We illustrate how to acquire evidence from a running system, and how to transport it via protocols to remote appraisers. We propose an architecture for attestation guided by these principles. Virtualized platforms, which are increasingly well supported on stock hardware, provide a natural basis for our attestation architecture.},
        number = {2},
        journal = {International Journal of Information Security},
        author = {Coker, George and Guttman, Joshua and Loscocco, Peter and Herzog, Amy and Millen, Jonathan and O’Hanlon, Brian and Ramsdell, John and Segall, Ariel and Sheehy, Justin and Sniffen, Brian},
        month = jun,
        year = {2011},
        pages = {63--81},
        file = {PDF:/Users/matthewberthoud/zotero/storage/2P9NE7SD/Principles of remote attestation.pdf:application/pdf},
}

@article{noauthor_principles_nodate,
	title = {Principles of remote attestation},
	file = {PDF:/Users/matthewberthoud/zotero/storage/2P9NE7SD/Principles of remote attestation.pdf:application/pdf},
}

@inproceedings{shahrad_architectural_2019,
	address = {Columbus OH USA},
	title = {Architectural {Implications} of {Function}-as-a-{Service} {Computing}},
	isbn = {978-1-4503-6938-1},
	url = {https://dl.acm.org/doi/10.1145/3352460.3358296},
	doi = {10.1145/3352460.3358296},
	language = {en},
	urldate = {2024-10-15},
	booktitle = {Proceedings of the 52nd {Annual} {IEEE}/{ACM} {International} {Symposium} on {Microarchitecture}},
	publisher = {ACM},
	author = {Shahrad, Mohammad and Balkind, Jonathan and Wentzlaff, David},
	month = oct,
	year = {2019},
	pages = {1063--1075},
	file = {Full Text:/Users/matthewberthoud/zotero/storage/3AQMJTXE/Shahrad et al. - 2019 - Architectural Implications of Function-as-a-Service Computing.pdf:application/pdf},
}

@inproceedings{lynn_preliminary_2017,
	title = {A {Preliminary} {Review} of {Enterprise} {Serverless} {Cloud} {Computing} ({Function}-as-a-{Service}) {Platforms}},
	url = {https://ieeexplore.ieee.org/document/8241104/?arnumber=8241104},
	doi = {10.1109/CloudCom.2017.15},
	abstract = {In line with cloud computing emergence as the dominant enterprise computing paradigm, our conceptualization of the cloud computing reference architecture and service construction has also evolved. For example, to address the need for cost reduction and rapid provisioning, virtualization has moved beyond hardware to containers. More recently, serverless computing or Function-as-a-Service has been presented as a means to introduce further cost-efficiencies, reduce configuration and management overheads, and rapidly increase an application's ability to speed up, scale up and scale down in the cloud. The potential of this new computation model is reflected in the introduction of serverless computing platforms by the main hyperscale cloud service providers. This paper provides an overview and multi-level feature analysis of seven enterprise serverless computing platforms. It reviews extant research on these platforms and identifies the emergence of AWS Lambda as a de facto base platform for research on enterprise serverless cloud computing. The paper concludes with a summary of avenues for further research.},
	urldate = {2024-10-15},
	booktitle = {2017 {IEEE} {International} {Conference} on {Cloud} {Computing} {Technology} and {Science} ({CloudCom})},
	author = {Lynn, Theo and Rosati, Pierangelo and Lejeune, Arnaud and Emeakaroha, Vincent},
	month = dec,
	year = {2017},
	note = {ISSN: 2330-2186},
	keywords = {Auth0 Webtask, AWS Lambda, Azure Functions, Cloud computing, Computational modeling, FAAS, Function-as-a-Service, Gestal Laser, Google, Google Cloud Functions, IBM OpenWhisk, Iron.io, Real-time systems, Serverless Computing, Servers, Virtualization},
	pages = {162--169},
	file = {Full Text PDF:/Users/matthewberthoud/zotero/storage/GGRW82WT/Lynn et al. - 2017 - A Preliminary Review of Enterprise Serverless Cloud Computing (Function-as-a-Service) Platforms.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/matthewberthoud/zotero/storage/GWFSY2IL/8241104.html:text/html},
}

@article{knauth_integrating_nodate,
	title = {Integrating {Intel} {SGX} {Remote} {Attestation} with {Transport} {Layer} {Security}},
	abstract = {Intel® Software Guard Extensions (Intel® SGX) is a promising technology to enhance securely processing information in otherwise untrusted environments. An important aspect of Intel SGX is the ability to perform remote attestation to assess the endpoint’s trustworthiness. Commonly, remote attestation is used to establish an attested secure channel to provision secrets to the enclave.},
	language = {en},
	author = {Knauth, Thomas and Steiner, Michael and Chakrabarti, Somnath and Lei, Li and Xing, Cedric and Vij, Mona},
	file = {PDF:/Users/matthewberthoud/zotero/storage/6LP5KBWG/Knauth et al. - Integrating Intel SGX Remote Attestation with Transport Layer Security.pdf:application/pdf},
}

@inproceedings{ahmad_veil_2023,
	address = {Vancouver BC Canada},
	title = {Veil: {A} {Protected} {Services} {Framework} for {Confidential} {Virtual} {Machines}},
	isbn = {9798400703942},
	shorttitle = {Veil},
	url = {https://dl.acm.org/doi/10.1145/3623278.3624763},
	doi = {10.1145/3623278.3624763},
	abstract = {Confidential virtual machines (CVMs) enabled by AMD SEV provide a protected environment for sensitive computations on an untrusted cloud. Unfortunately, CVMs are typically deployed with huge and vulnerable operating system kernels, exposing the CVMs to attacks that exploit kernel vulnerabilities. Veil is a versatile CVM framework that efficiently protects critical system services like shielding sensitive programs, which cannot be entrusted to the buggy kernel. Veil leverages a new hardware primitive, virtual machine privilege levels (VMPL), to install a privileged security monitor inside the CVM. We overcome several challenges in designing Veil, including (a) creating unlimited secure domains with a limited number of VMPLs, (b) establishing resource-efficient domain switches, and (c) maintaining commodity kernel backwardscompatibility with only minor changes. Our evaluation shows that Veil incurs no discernible performance slowdown during normal CVM execution while incurring a modest overhead (2 − 64\%) when running its protected services across real-world use cases.},
	language = {en},
	urldate = {2024-10-16},
	booktitle = {Proceedings of the 28th {ACM} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}, {Volume} 4},
	publisher = {ACM},
	author = {Ahmad, Adil and Ou, Botong and Liu, Congyu and Zhang, Xiaokuan and Fonseca, Pedro},
	month = mar,
	year = {2023},
	pages = {378--393},
	file = {PDF:/Users/matthewberthoud/zotero/storage/T2K7L7DG/Ahmad et al. - 2023 - Veil A Protected Services Framework for Confidential Virtual Machines.pdf:application/pdf},
}

@article{schwarz_seng_nodate,
	title = {{SENG}, the {SGX}-{Enforcing} {Network} {Gateway}: {Authorizing} {Communication} from {Shielded} {Clients}},
	abstract = {Network administrators face a security-critical dilemma. While they want to tightly contain their hosts, they usually have to relax ﬁrewall policies to support a large variety of applications. However, liberal policies like this enable data exﬁltration by unknown (and untrusted) client applications. An inability to attribute communication accurately and reliably to applications is at the heart of this problem. Firewall policies are restricted to coarse-grained features that are easy to evade and mimic, such as protocols or port numbers.},
	language = {en},
	author = {Schwarz, Fabian and Rossow, Christian},
	file = {PDF:/Users/matthewberthoud/zotero/storage/QDANHI5X/Schwarz and Rossow - SENG, the SGX-Enforcing Network Gateway Authorizing Communication from Shielded Clients.pdf:application/pdf},
}

@article{zhang_shelter_nodate,
	title = {Shelter: {Extending} {Arm} {CCA} with {Isolation} in {User} {Space}},
	abstract = {The increasing adoption of confidential computing is providing individual users with a more seamless interaction with numerous mobile and server devices. TrustZone is a promising security technology for the use of partitioning sensitive private data into a trusted execution environment (TEE). Unfortunately, third-party developers have limited accessibility to TrustZone. This is because TEE vendors need to validate such security applications to preserve their security rigorously. Moreover, TrustZone-based systems suffer from vulnerabilities affecting Trusted App and trusted OS, possibly causing the entire system to be compromised. Advanced virtualization-based TEE introduced in the recently new concept of Confidential Compute Architecture (CCA) creates a new physical address space called Realm world for confidential computing to protect the data confidentiality and integrity. The current version of CCA primarily targets the VM level in the Realm world and does not provide user-level isolated environments. To fill up this gap, we present SHELTER, which is a complement to CCA’s primary Realm VM-style architecture. SHELTER allows thirdparty developers to deploy their applications with isolation in userspace. SHELTER is designed by cooperating with Arm CCA hardware primitive available in Armv9.2 to provide hardware-based isolation while removing the need for software workloads to trust their data to a Host OS, hypervisor, or privileged software (e.g., trusted OS, Secure/Realm hypervisor). We have implemented and evaluated SHELTER, and the results demonstrated that SHELTER guarantees the security of applications with a modest performance overhead ({\textless}15\%) on real-world workloads.},
	language = {en},
	author = {Zhang, Yiming and Ning, Zhenyu and Zhang, Fengwei},
	file = {PDF:/Users/matthewberthoud/zotero/storage/JTJBP9PS/Zhang et al. - Shelter Extending Arm CCA with Isolation in User Space.pdf:application/pdf},
}

@article{cheng_intel_2024,
	title = {Intel {TDX} {Demystified}: {A} {Top}-{Down} {Approach}},
	volume = {56},
	issn = {0360-0300, 1557-7341},
	shorttitle = {Intel {TDX} {Demystified}},
	url = {https://dl.acm.org/doi/10.1145/3652597},
	doi = {10.1145/3652597},
	abstract = {Intel Trust Domain Extensions (TDX) is an architectural extension in the 4th Generation Intel Xeon Scalable Processor that supports confidential computing. TDX allows the deployment of virtual machines in the Secure-Arbitration Mode (SEAM) with encrypted CPU state and memory, integrity protection, and remote attestation. TDX aims at enforcing hardware-assisted isolation for virtual machines and minimize the attack surface exposed to host platforms, which are considered to be untrustworthy or adversarial in the confidential computing’s new threat model. TDX can be leveraged by regulated industries or sensitive data holders to outsource their computations and data with end-to-end protection in public cloud infrastructures.
            This article aims at providing a comprehensive understanding of TDX to potential adopters, domain experts, and security researchers looking to leverage the technology for their own purposes. We adopt a top-down approach, starting with high-level security principles and moving to low-level technical details of TDX. Our analysis is based on publicly available documentation and source code, offering insights from security researchers outside of Intel.},
	language = {en},
	number = {9},
	urldate = {2024-10-16},
	journal = {ACM Computing Surveys},
	author = {Cheng, Pau-Chen and Ozga, Wojciech and Valdez, Enriquillo and Ahmed, Salman and Gu, Zhongshu and Jamjoom, Hani and Franke, Hubertus and Bottomley, James},
	month = oct,
	year = {2024},
	pages = {1--33},
	file = {PDF:/Users/matthewberthoud/zotero/storage/U67G7RRM/Cheng et al. - 2024 - Intel TDX Demystified A Top-Down Approach.pdf:application/pdf},
}

@inproceedings{jager_rolling_2017,
	address = {New York, NY, USA},
	series = {{ARES} '17},
	title = {Rolling {DICE}: {Lightweight} {Remote} {Attestation} for {COTS} {IoT} {Hardware}},
	isbn = {978-1-4503-5257-4},
	shorttitle = {Rolling {DICE}},
	url = {https://doi.org/10.1145/3098954.3103165},
	doi = {10.1145/3098954.3103165},
	abstract = {The specification Device Identity Composition Engine (DICE) provides a novel basis for remote attestations specifically suitable in the IoT context. Its purpose is to provide means for remote attestations to devices that are too size-, cost-, energy- or otherwise constrained to have Trusted Platform Module attached.This paper gives a short explanation of DICE and compares different approaches for building up a remote attestation protocol based on it, using symmetric and asymmetric cryptography. Based on this comparison a symmetric attestation protocol is proposed for most resource constrained devices and its implications for attestation servers are discussed. Furthermore a feasibility study is conducted mapping the DICE and the proposed DICE-based attestation approach to commercial off-the-shelf (COTS) hardware -- namely Arduino Uno in this case -- and measurement of the code size, binary size and added computational requirements is provided. The security of the mapping approach is evaluated and its advantages and pitfalls are demonstrated. The goal is to show how DICE-based approaches can be mapped to existing hardware and how a more secure IoT environment can be established on already deployed devices without changes to the hardware.},
	urldate = {2024-10-15},
	booktitle = {Proceedings of the 12th {International} {Conference} on {Availability}, {Reliability} and {Security}},
	publisher = {Association for Computing Machinery},
	author = {Jäger, Lukas and Petri, Richard and Fuchs, Andreas},
	month = aug,
	year = {2017},
	pages = {1--8},
}

@article{england_foundation_nodate,
	title = {A {Foundation} for {Trust} in the {Internet} of {Things}},
	language = {en},
	author = {England, Paul and Marochko, Andrey and Mattoon, Dennis and Spiger, Rob and Thom, Stefan and Wooten, David},
	file = {PDF:/Users/matthewberthoud/zotero/storage/M58XU34C/England et al. - A Foundation for Trust in the Internet of Things.pdf:application/pdf},
}

@article{chen_mage_nodate,
	title = {Mage: {Mutual} {Attestation} for a {Group} of {Enclaves} without {Trusted} {Third} {Parties}},
	abstract = {Remote attestation mechanism enables an enclave to attest its identity (which is usually represented by the enclave’s initial code and data) to another enclave. To verify that the attested identity is trusted, one enclave usually includes the identity of the enclave it trusts into its initial data in advance assuming no trusted third parties are available during runtime to provide this piece of information. However, when mutual trust between these two enclaves is required, it is infeasible to simultaneously include into their own initial data the other’s identities respectively as any change to the initial data will change their identities, making the previously included identities invalid. In this paper, we propose MAGE, a framework enabling a group of enclaves to mutually attest each other without trusted third parties. Particularly, we introduce a technique to instrument these enclaves so that each of them could derive the others’ identities using information solely from its own initial data. We also provide an open-sourced prototype implementation based on Intel SGX SDK, to facilitate enclave developers to adopt this technique.},
	language = {en},
	author = {Chen, Guoxing},
	file = {PDF:/Users/matthewberthoud/zotero/storage/B8JJMMNP/Chen - Mage Mutual Attestation for a Group of Enclaves without Trusted Third Parties.pdf:application/pdf},
}

@inproceedings{narayanan_remote_2023,
	address = {Austin TX USA},
	title = {Remote attestation of confidential {VMs} using ephemeral {vTPMs}},
	isbn = {9798400708862},
	url = {https://dl.acm.org/doi/10.1145/3627106.3627112},
	doi = {10.1145/3627106.3627112},
	language = {en},
	urldate = {2024-10-16},
	booktitle = {Annual {Computer} {Security} {Applications} {Conference}},
	publisher = {ACM},
	author = {Narayanan, Vikram and Carvalho, Claudio and Ruocco, Angelo and Almasi, Gheorghe and Bottomley, James and Ye, Mengmei and Feldman-Fitzthum, Tobin and Buono, Daniele and Franke, Hubertus and Burtsev, Anton},
	month = dec,
	year = {2023},
	pages = {732--743},
	file = {PDF:/Users/matthewberthoud/zotero/storage/YG5IZKTN/Narayanan et al. - 2023 - Remote attestation of confidential VMs using ephemeral vTPMs.pdf:application/pdf},
}

@article{tsai_graphene-sgx_nodate,
	title = {Graphene-{SGX}: {A} {Practical} {Library} {OS} for {Unmodified} {Applications} on {SGX}},
	abstract = {Intel SGX hardware enables applications to protect themselves from potentially-malicious OSes or hypervisors. In cloud computing and other systems, many users and applications could beneﬁt from SGX. Unfortunately, current applications will not work out-of-the-box on SGX. Although previous work has shown that a library OS can execute unmodiﬁed applications on SGX, a belief has developed that a library OS will be ruinous for performance and TCB size, making application code modiﬁcation an implicit prerequisite to adopting SGX.},
	language = {en},
	author = {Tsai, Chia-Che and Hill, Chapel and Vij, Mona},
	file = {PDF:/Users/matthewberthoud/zotero/storage/BAEKPJVR/Tsai et al. - Graphene-SGX A Practical Library OS for Unmodified Applications on SGX.pdf:application/pdf},
}

@inproceedings{shen_x-containers_2019,
	address = {Providence RI USA},
	title = {X-{Containers}: {Breaking} {Down} {Barriers} to {Improve} {Performance} and {Isolation} of {Cloud}-{Native} {Containers}},
	isbn = {978-1-4503-6240-5},
	shorttitle = {X-{Containers}},
	url = {https://dl.acm.org/doi/10.1145/3297858.3304016},
	doi = {10.1145/3297858.3304016},
	abstract = {Cloud-native” container platforms, such as Kubernetes, have become an integral part of production cloud environments. One of the principles in designing cloud-native applications is called Single Concern Principle, which suggests that each container should handle a single responsibility well. In this paper, we propose X-Containers as a new security paradigm for isolating single-concerned cloud-native containers. Each container is run with a Library OS (LibOS) that supports multi-processing for concurrency and compatibility. A minimal exokernel ensures strong isolation with small kernel attack surface. We show an implementation of the X-Containers architecture that leverages Xen paravirtualization (PV) to turn Linux kernel into a LibOS. Doing so results in a highly efficient LibOS platform that does not require hardware-assisted virtualization, improves intercontainer isolation, and supports binary compatibility and multi-processing. By eliminating some security barriers such as seccomp and Meltdown patch, X-Containers have up to 27× higher raw system call throughput compared to Docker containers, while also achieving competitive or superior performance on various benchmarks compared to recent container platforms such as Google’s gVisor and Intel’s Clear Containers.},
	language = {en},
	urldate = {2024-10-16},
	booktitle = {Proceedings of the {Twenty}-{Fourth} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}},
	publisher = {ACM},
	author = {Shen, Zhiming and Sun, Zhen and Sela, Gur-Eyal and Bagdasaryan, Eugene and Delimitrou, Christina and Van Renesse, Robbert and Weatherspoon, Hakim},
	month = apr,
	year = {2019},
	pages = {121--135},
	file = {PDF:/Users/matthewberthoud/zotero/storage/FSEHS42S/Shen et al. - 2019 - X-Containers Breaking Down Barriers to Improve Performance and Isolation of Cloud-Native Containers.pdf:application/pdf},
}

@article{zhao_reusable_nodate,
	title = {Reusable {Enclaves} for {Confidential} {Serverless} {Computing}},
	abstract = {The recent development of Trusted Execution Environment has brought unprecedented opportunities for confidential computing within cloud-based systems. Among various popular cloud business models, serverless computing has gained dominance since its emergence, leading to a high demand for confidential serverless computing services based on trusted enclaves. However, the issue of cold start overhead significantly hinders its performance, as new enclaves need to be created to ensure a clean and verifiable execution environment. In this paper, we propose a novel approach for constructing reusable enclaves that enable rapid enclave reset and robust security with three key enabling techniques: enclave snapshot and rewinding, nested attestation, and multi-layer intra-enclave compartmentalisation. We have built a prototype system for confidential serverless computing, integrating OpenWhisk and a WebAssembly runtime, which significantly reduces the cold start overhead in an end-to-end serverless setting while imposing a reasonable performance impact on standard execution.},
	language = {en},
	author = {Zhao, Shixuan},
	file = {PDF:/Users/matthewberthoud/zotero/storage/KI46FLNX/Zhao - Reusable Enclaves for Confidential Serverless Computing.pdf:application/pdf},
}

@inproceedings{findlay_bpfbox_2020,
	address = {Virtual Event USA},
	title = {bpfbox: {Simple} {Precise} {Process} {Confinement} with {eBPF}},
	isbn = {978-1-4503-8084-3},
	shorttitle = {bpfbox},
	url = {https://dl.acm.org/doi/10.1145/3411495.3421358},
	doi = {10.1145/3411495.3421358},
	abstract = {Process confinement is a key requirement for workloads in the cloud and in other contexts. Existing process confinement mechanisms on Linux, however, are complex and inflexible because they are implemented using a combination of primitive abstractions (e.g., namespaces, cgroups) and complex security mechanisms (e.g., SELinux, AppArmor) that were designed for purposes beyond basic process confinement. We argue that simple, efficient, and flexible confinement can be better implemented today using eBPF, an emerging technology for safely extending the Linux kernel. We present a proof-of-concept confinement application, bpfbox, that uses less than 2000 lines of kernelspace code and allows for confinement at the userspace function, system call, LSM hook, and kernelspace function boundaries—something that no existing process confinement mechanism can do. Further, it does so using a policy language simple enough to use for ad-hoc confinement purposes. This paper presents the motivation, design, implementation, and benchmarks of bpfbox, including a sample web server confinement policy.},
	language = {en},
	urldate = {2024-10-16},
	booktitle = {Proceedings of the 2020 {ACM} {SIGSAC} {Conference} on {Cloud} {Computing} {Security} {Workshop}},
	publisher = {ACM},
	author = {Findlay, William and Somayaji, Anil and Barrera, David},
	month = nov,
	year = {2020},
	pages = {91--103},
	file = {PDF:/Users/matthewberthoud/zotero/storage/7TBEWIPR/Findlay et al. - 2020 - bpfbox Simple Precise Process Confinement with eBPF.pdf:application/pdf},
}

@article{jegan_guarding_nodate,
	title = {Guarding {Serverless} {Applications} with {Kalium}},
	abstract = {As an emerging application paradigm, serverless computing attracts attention from more and more adversaries. Unfortunately, security tools for conventional web applications cannot be easily ported to serverless computing due to its distributed nature, and existing serverless security solutions focus on enforcing user specified information flow policies which are unable to detect the manipulation of the order of functions in application control flow paths. In this paper, we present Kalium, an extensible security framework that leverages local function state and global application state to enforce control-flow integrity (CFI) in serverless applications. We evaluate the performance overhead and security of Kalium using realistic open-source applications; our results show that Kalium mitigates several classes of attacks with relatively low performance overhead and outperforms the state-of-the-art serverless information flow protection systems.},
	language = {en},
	author = {Jegan, Deepak Sirone and Wang, Liang and Swift, Michael},
	file = {PDF:/Users/matthewberthoud/zotero/storage/476NHXUJ/Jegan et al. - Guarding Serverless Applications with Kalium.pdf:application/pdf},
}

@article{li_automatic_nodate,
	title = {Automatic {Policy} {Generation} for {Inter}-{Service} {Access} {Control} of {Microservices}},
	abstract = {Cloud applications today are often composed of many microservices. To prevent a microservice from being abused by other (compromised) microservices, inter-service access control is applied. However, the complexity of ﬁne-grained access control policies, along with the large-scale and dynamic nature of microservices, makes the current manual conﬁgurationbased access control unsuitable. This paper presents AUTOARMOR, the ﬁrst attempt to automate inter-service access control policy generation for microservices, with two fundamental techniques: (1) a static analysis-based request extraction mechanism that automatically obtains the invocation logic among microservices, and (2) a graph-based policy management mechanism that generates corresponding access control policies with on-demand policy update. Our evaluation on popular microservice applications shows that AUTOARMOR is able to generate ﬁne-grained inter-service access control policies and update them timely based on changes in the application, with only a minor runtime overhead. By seamlessly integrating with the lifecycle of microservices, it does not require any changes to existing code and infrastructures.},
	language = {en},
	author = {Li, Xing},
	file = {PDF:/Users/matthewberthoud/zotero/storage/TN5GTBKD/Li - Automatic Policy Generation for Inter-Service Access Control of Microservices.pdf:application/pdf},
}

@article{jegan_guarding_nodate-1,
	title = {Guarding {Serverless} {Applications} with {Kalium}},
	abstract = {As an emerging application paradigm, serverless computing attracts attention from more and more adversaries. Unfortunately, security tools for conventional web applications cannot be easily ported to serverless computing due to its distributed nature, and existing serverless security solutions focus on enforcing user specified information flow policies which are unable to detect the manipulation of the order of functions in application control flow paths. In this paper, we present Kalium, an extensible security framework that leverages local function state and global application state to enforce control-flow integrity (CFI) in serverless applications. We evaluate the performance overhead and security of Kalium using realistic open-source applications; our results show that Kalium mitigates several classes of attacks with relatively low performance overhead and outperforms the state-of-the-art serverless information flow protection systems.},
	language = {en},
	author = {Jegan, Deepak Sirone and Wang, Liang and Swift, Michael},
	file = {PDF:/Users/matthewberthoud/zotero/storage/85UR2CQ6/Jegan et al. - Guarding Serverless Applications with Kalium.pdf:application/pdf},
}

@article{zhou_electrode_nodate,
	title = {Electrode: {Accelerating} {Distributed} {Protocols} with {eBPF}},
	abstract = {Implementing distributed protocols under a standard Linux kernel networking stack enjoys the benefits of load-aware CPU scaling, high compatibility, and robust security and isolation. However, it suffers from low performance because of excessive user-kernel crossings and kernel networking stack traversing. We present Electrode with a set of eBPF-based performance optimizations designed for distributed protocols. These optimizations get executed in the kernel before the networking stack but achieve similar functionalities as were implemented in user space (e.g., message broadcasting, collecting quorum of acknowledgments), thus avoiding the overheads incurred by user-kernel crossings and kernel networking stack traversing. We show that when applied to a classic Multi-Paxos state machine replication protocol, Electrode improves its throughput by up to 128.4\% and latency by up to 41.7\%.},
	language = {en},
	author = {Zhou, Yang and Dharanipragada, Sowmya},
	file = {PDF:/Users/matthewberthoud/zotero/storage/F36INHEJ/Zhou and Dharanipragada - Electrode Accelerating Distributed Protocols with eBPF.pdf:application/pdf},
}

@misc{eichner_confidential_2024,
	title = {Confidential {Federated} {Computations}},
	url = {http://arxiv.org/abs/2404.10764},
	abstract = {Federated Learning and Analytics (FLA) have seen widespread adoption by technology platforms for processing sensitive on-device data. However, basic FLA systems have privacy limitations: they do not necessarily require anonymization mechanisms like differential privacy (DP), and provide limited protections against a potentially malicious service provider. Adding DP to a basic FLA system currently requires either adding excessive noise to each device's updates, or assuming an honest service provider that correctly implements the mechanism and only uses the privatized outputs. Secure multiparty computation (SMPC) -based oblivious aggregations can limit the service provider's access to individual user updates and improve DP tradeoffs, but the tradeoffs are still suboptimal, and they suffer from scalability challenges and susceptibility to Sybil attacks. This paper introduces a novel system architecture that leverages trusted execution environments (TEEs) and open-sourcing to both ensure confidentiality of server-side computations and provide externally verifiable privacy properties, bolstering the robustness and trustworthiness of private federated computations.},
	urldate = {2024-10-16},
	publisher = {arXiv},
	author = {Eichner, Hubert and Ramage, Daniel and Bonawitz, Kallista and Huba, Dzmitry and Santoro, Tiziano and McLarnon, Brett and Overveldt, Timon Van and Fallen, Nova and Kairouz, Peter and Cheu, Albert and Daly, Katharine and Gascon, Adria and Gruteser, Marco and McMahan, Brendan},
	month = apr,
	year = {2024},
	note = {arXiv:2404.10764},
	keywords = {Computer Science - Cryptography and Security, Computer Science - Machine Learning},
	file = {Preprint PDF:/Users/matthewberthoud/zotero/storage/52A8THTK/Eichner et al. - 2024 - Confidential Federated Computations.pdf:application/pdf},
}

@article{tak_understanding_nodate,
	title = {Understanding {Security} {Implications} of {Using} {Containers} in the {Cloud}},
	abstract = {Container technology is being adopted as a mainstream platform for IT solutions because of high degree of agility, reusability and portability it offers. However, there are challenges to be addressed for successful adoption. First, it is difﬁcult to establish the full pedigree of images downloaded from public registries. Some might have vulnerabilities introduced unintentionally through rounds of updates by different users. Second, non-conformance to the immutable software deployment policies, such as those promoted by the DevOps principles, introduces vulnerabilities and the loss of control over deployed software. In this study, we investigate containers deployed in a production cloud to derive a set of recommended approaches to address these challenges. Our analysis reveals evidences that (i), images of unresolved pedigree have introduced vulnerabilities to containers belonging to third parties; (ii), updates to live public containers are common, defying the tenet that deployed software is immutable; and (iii), scanning containers or images alone is insufﬁcient to eradicate vulnerabilities from public containers. We advocate for better systems support for tracking image provenance and resolving disruptive changes to containers, and propose practices that container users should adopt to limit the vulnerability of their containers.},
	language = {en},
	author = {Tak, Byungchul and Isci, Canturk and Duri, Sastry and Bila, Nilton and Nadgowda, Shripad and Doran, James},
	file = {PDF:/Users/matthewberthoud/zotero/storage/3A7GLPWX/Tak et al. - Understanding Security Implications of Using Containers in the Cloud.pdf:application/pdf},
}

@inproceedings{gao_houdinis_2019,
	address = {London United Kingdom},
	title = {Houdini's {Escape}: {Breaking} the {Resource} {Rein} of {Linux} {Control} {Groups}},
	isbn = {978-1-4503-6747-9},
	shorttitle = {Houdini's {Escape}},
	url = {https://dl.acm.org/doi/10.1145/3319535.3354227},
	doi = {10.1145/3319535.3354227},
	abstract = {Linux Control Groups, i.e., cgroups, are the key building blocks to enable operating-system-level containerization. The cgroups mechanism partitions processes into hierarchical groups and applies different controllers to manage system resources, including CPU, memory, block I/O, etc. Newly spawned child processes automatically copy cgroups attributes from their parents to enforce resource control. Unfortunately, inherited cgroups confinement via process creation does not always guarantee consistent and fair resource accounting. In this paper, we devise a set of exploiting strategies to generate out-of-band workloads via de-associating processes from their original process groups. The system resources consumed by such workloads will not be charged to the appropriate cgroups. To further demonstrate the feasibility, we present five case studies within Docker containers to demonstrate how to break the resource rein of cgroups in realistic scenarios. Even worse, by exploiting those cgroups’ insufficiencies in a multi-tenant container environment, an adversarial container is able to greatly amplify the amount of consumed resources, significantly slow-down other containers on the same host, and gain extra unfair advantages on the system resources. We conduct extensive experiments on both a local testbed and an Amazon EC2 cloud dedicated server. The experimental results demonstrate that a container can consume system resources (e.g., CPU) as much as 200× of its limit, and reduce both computing and I/O performance of particular workloads in other co-resident containers by 95\%.},
	language = {en},
	urldate = {2024-10-16},
	booktitle = {Proceedings of the 2019 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {ACM},
	author = {Gao, Xing and Gu, Zhongshu and Li, Zhengfa and Jamjoom, Hani and Wang, Cong},
	month = nov,
	year = {2019},
	pages = {1073--1086},
	file = {PDF:/Users/matthewberthoud/zotero/storage/K5YDGTMZ/Gao et al. - 2019 - Houdini's Escape Breaking the Resource Rein of Linux Control Groups.pdf:application/pdf},
}

@article{li_rund_nodate,
	title = {{RunD}: {A} {Lightweight} {Secure} {Container} {Runtime} for {High}-density {Deployment} and {High}-concurrency {Startup} in {Serverless} {Computing}},
	abstract = {The secure container that hosts a single container in a micro virtual machine (VM) is now used in serverless computing, as the containers are isolated through the microVMs. There are high demands on the high-density container deployment and high-concurrency container startup to improve both the resource utilization and user experience, as user functions are ﬁne-grained in serverless platforms. Our investigation shows that the entire software stacks, containing the cgroups in the host operating system, the guest operating system, and the container rootfs for the function workload, together result in low deployment density and slow startup performance at high-concurrency. We propose and implement a lightweight secure container runtime, named RunD, to resolve the above problems through a holistic guest-tohost solution. With RunD, over 200 secure containers can be started in a second, and over 2,500 secure containers can be deployed on a node with 384GB of memory. RunD is adopted as Alibaba serverless container runtime to support high-density deployment and high-concurrency startup.},
	language = {en},
	author = {Li, Zijun and Bian, Zizheng and Tao, Yi and Zha, Bin and Wang, Qiang and Han, Weidong and Guo, Minyi},
	file = {PDF:/Users/matthewberthoud/zotero/storage/Y4EVS4RM/Li et al. - RunD A Lightweight Secure Container Runtime for High-density Deployment and High-concurrency Startu.pdf:application/pdf},
}

@article{ahmad_extensible_nodate,
	title = {An {Extensible} {Orchestration} and {Protection} {Framework} for {Confidential} {Cloud} {Computing}},
	abstract = {Confidential computing solutions are crucial to address the cloud privacy concerns. Although SGX has witnessed significant adoption in the cloud, the reliance on hardware implementation is restrictive for cloud providers in terms of orchestrating deployments and providing stronger security to their clients’ enclaves. eOPF addresses this limitation by providing a comprehensive, secure hypervisor-level instrumentation framework with the ability to monitor all enclave-OS interactions and implement protected services. eOPF overcomes several challenges including bridging the semantic gap between the hypervisor and SGX and attesting the co-location of the framework with enclaves. Using eOPF, we implement two protected services that provide platform resource orchestration and complementary enclave side-channel defense. Our evaluation shows that eOPF incurs very low performance overhead ({\textless}2\%) in its default state and only modest overhead (geometric mean of 17\% on SPEC) when strong, complementary side-channel defenses are enabled, making eOPF an efficient and practical solution for the cloud.},
	language = {en},
	author = {Ahmad, Adil and Schultz, Alex and Lee, Byoungyoung},
	file = {PDF:/Users/matthewberthoud/zotero/storage/6KPXUYYK/Ahmad et al. - An Extensible Orchestration and Protection Framework for Confidential Cloud Computing.pdf:application/pdf},
}

@misc{angel_nimble_2023,
	title = {Nimble: {Rollback} {Protection} for {Confidential} {Cloud} {Services} (extended version)},
	shorttitle = {Nimble},
	url = {https://eprint.iacr.org/2023/761},
	abstract = {This paper introduces Nimble, a cloud service that helps applications running in trusted execution environments (TEEs) to detect rollback attacks (i.e., detect whether a data item retrieved from persistent storage is the latest version). To achieve this, Nimble realizes an append-only ledger service by employing a simple state machine running in a TEE in conjunction with a crash fault-tolerant storage service. Nimble then replicates this trusted state machine to ensure the system is available even if a minority of state machines crash. A salient aspect of Nimble is a new reconfiguration protocol that allows a cloud provider to replace the set of nodes running the trusted state machine whenever it wishes—without affecting safety. We have formally verified Nimble’s core protocol in Dafny, and have implemented Nimble such that its trusted state machine runs in multiple TEE platforms (Intel SGX and AMD SNP-SEV). Our results show that a deployment of Nimble on machines running in different availability zones can achieve from tens of thousands of requests/sec with an end-to-end latency of under 3.2 ms (based on an in-memory key-value store) to several thousands of requests/sec with a latency of 30ms (based on Azure Table).},
	urldate = {2024-10-16},
	author = {Angel, Sebastian and Basu, Aditya and Cui, Weidong and Jaeger, Trent and Lau, Stella and Setty, Srinath and Singanamalla, Sudheesh},
	year = {2023},
	note = {Publication info: Published elsewhere. USENIX OSDI},
	keywords = {confidential computing, rollback protection},
}

@misc{bonawitz_towards_2019,
	title = {Towards {Federated} {Learning} at {Scale}: {System} {Design}},
	shorttitle = {Towards {Federated} {Learning} at {Scale}},
	url = {http://arxiv.org/abs/1902.01046},
	abstract = {Federated Learning is a distributed machine learning approach which enables model training on a large corpus of decentralized data. We have built a scalable production system for Federated Learning in the domain of mobile devices, based on TensorFlow. In this paper, we describe the resulting high-level design, sketch some of the challenges and their solutions, and touch upon the open problems and future directions.},
	urldate = {2024-10-16},
	publisher = {arXiv},
	author = {Bonawitz, Keith and Eichner, Hubert and Grieskamp, Wolfgang and Huba, Dzmitry and Ingerman, Alex and Ivanov, Vladimir and Kiddon, Chloe and Konečný, Jakub and Mazzocchi, Stefano and McMahan, H. Brendan and Overveldt, Timon Van and Petrou, David and Ramage, Daniel and Roselander, Jason},
	month = mar,
	year = {2019},
	note = {arXiv:1902.01046},
	keywords = {Computer Science - Machine Learning, Computer Science - Distributed, Parallel, and Cluster Computing, Statistics - Machine Learning},
	file = {Preprint PDF:/Users/matthewberthoud/zotero/storage/KPJ7MBD8/Bonawitz et al. - 2019 - Towards Federated Learning at Scale System Design.pdf:application/pdf;Snapshot:/Users/matthewberthoud/zotero/storage/KMPVTRNH/1902.html:text/html},
}

@misc{huba_papaya_2022,
	title = {Papaya: {Practical}, {Private}, and {Scalable} {Federated} {Learning}},
	shorttitle = {Papaya},
	url = {http://arxiv.org/abs/2111.04877},
	abstract = {Cross-device Federated Learning (FL) is a distributed learning paradigm with several challenges that differentiate it from traditional distributed learning, variability in the system characteristics on each device, and millions of clients coordinating with a central server being primary ones. Most FL systems described in the literature are synchronous - they perform a synchronized aggregation of model updates from individual clients. Scaling synchronous FL is challenging since increasing the number of clients training in parallel leads to diminishing returns in training speed, analogous to large-batch training. Moreover, stragglers hinder synchronous FL training. In this work, we outline a production asynchronous FL system design. Our work tackles the aforementioned issues, sketches of some of the system design challenges and their solutions, and touches upon principles that emerged from building a production FL system for millions of clients. Empirically, we demonstrate that asynchronous FL converges faster than synchronous FL when training across nearly one hundred million devices. In particular, in high concurrency settings, asynchronous FL is 5x faster and has nearly 8x less communication overhead than synchronous FL.},
	urldate = {2024-10-16},
	publisher = {arXiv},
	author = {Huba, Dzmitry and Nguyen, John and Malik, Kshitiz and Zhu, Ruiyu and Rabbat, Mike and Yousefpour, Ashkan and Wu, Carole-Jean and Zhan, Hongyuan and Ustinov, Pavel and Srinivas, Harish and Wang, Kaikai and Shoumikhin, Anthony and Min, Jesik and Malek, Mani},
	month = apr,
	year = {2022},
	note = {arXiv:2111.04877},
	keywords = {Computer Science - Machine Learning, Computer Science - Distributed, Parallel, and Cluster Computing},
	file = {Preprint PDF:/Users/matthewberthoud/zotero/storage/3LXK588T/Huba et al. - 2022 - Papaya Practical, Private, and Scalable Federated Learning.pdf:application/pdf;Snapshot:/Users/matthewberthoud/zotero/storage/CI7DUHDQ/2111.html:text/html},
}

@misc{noauthor_google-parfaitfederated-compute_2024,
	title = {google-parfait/federated-compute},
	copyright = {Apache-2.0},
	url = {https://github.com/google-parfait/federated-compute},
	abstract = {Libraries for executing federated programs and computations.},
	urldate = {2024-10-16},
	publisher = {Parfait},
	month = oct,
	year = {2024},
	note = {original-date: 2021-09-14T15:04:39Z},
}

@misc{jin_elephants_2024,
	title = {Elephants {Do} {Not} {Forget}: {Differential} {Privacy} with {State} {Continuity} for {Privacy} {Budget}},
	shorttitle = {Elephants {Do} {Not} {Forget}},
	url = {http://arxiv.org/abs/2401.17628},
	abstract = {Current implementations of differentially-private (DP) systems either lack support to track the global privacy budget consumed on a dataset, or fail to faithfully maintain the state continuity of this budget. We show that failure to maintain a privacy budget enables an adversary to mount replay, rollback and fork attacks - obtaining answers to many more queries than what a secure system would allow. As a result the attacker can reconstruct secret data that DP aims to protect - even if DP code runs in a Trusted Execution Environment (TEE). We propose ElephantDP, a system that aims to provide the same guarantees as a trusted curator in the global DP model would, albeit set in an untrusted environment. Our system relies on a state continuity module to provide protection for the privacy budget and a TEE to faithfully execute DP code and update the budget. To provide security, our protocol makes several design choices including the content of the persistent state and the order between budget updates and query answers. We prove that ElephantDP provides liveness (i.e., the protocol can restart from a correct state and respond to queries as long as the budget is not exceeded) and DP confidentiality (i.e., an attacker learns about a dataset as much as it would from interacting with a trusted curator). Our implementation and evaluation of the protocol use Intel SGX as a TEE to run the DP code and a network of TEEs to maintain state continuity. Compared to an insecure baseline, we observe 1.1-3.2\${\textbackslash}times\$ overheads and lower relative overheads for complex DP queries.},
	urldate = {2024-10-16},
	publisher = {arXiv},
	author = {Jin, Jiankai and Chuengsatiansup, Chitchanok and Murray, Toby and Rubinstein, Benjamin I. P. and Yarom, Yuval and Ohrimenko, Olga},
	month = aug,
	year = {2024},
	note = {arXiv:2401.17628},
	keywords = {Computer Science - Cryptography and Security},
	file = {Preprint PDF:/Users/matthewberthoud/zotero/storage/2BCWN6J4/Jin et al. - 2024 - Elephants Do Not Forget Differential Privacy with State Continuity for Privacy Budget.pdf:application/pdf;Snapshot:/Users/matthewberthoud/zotero/storage/PWSHWGB3/2401.html:text/html},
}

@article{matetic_rote_nodate,
	title = {{ROTE}: {Rollback} {Protection} for {Trusted} {Execution}},
	abstract = {Security architectures such as Intel SGX need protection against rollback attacks, where the adversary violates the integrity of a protected application state by replaying old persistently stored data or by starting multiple application instances. Successful rollback attacks have serious consequences on applications such as ﬁnancial services. In this paper, we propose a new approach for rollback protection on SGX. The intuition behind our approach is simple. A single platform cannot efﬁciently prevent rollback, but in many practical scenarios, multiple processors can be enrolled to assist each other. We design and implement a rollback protection system called ROTE that realizes integrity protection as a distributed system. We construct a model that captures adversarial ability to schedule enclave execution and show that our solution achieves a strong security property: the only way to violate integrity is to reset all participating platforms to their initial state. We implement ROTE and demonstrate that distributed rollback protection can provide signiﬁcantly better performance than previously known solutions based on local non-volatile memory.},
	language = {en},
	author = {Matetic, Sinisa and Ahmed, Mansoor and Kostiainen, Kari and Dhar, Aritra and Sommer, David},
	file = {PDF:/Users/matthewberthoud/zotero/storage/CCGGPZZ4/Matetic et al. - ROTE Rollback Protection for Trusted Execution.pdf:application/pdf},
}

@inproceedings{niu_narrator_2022,
	address = {Los Angeles CA USA},
	title = {{NARRATOR}: {Secure} and {Practical} {State} {Continuity} for {Trusted} {Execution} in the {Cloud}},
	isbn = {978-1-4503-9450-5},
	shorttitle = {{NARRATOR}},
	url = {https://dl.acm.org/doi/10.1145/3548606.3560620},
	doi = {10.1145/3548606.3560620},
	language = {en},
	urldate = {2024-10-16},
	booktitle = {Proceedings of the 2022 {ACM} {SIGSAC} {Conference} on {Computer} and {Communications} {Security}},
	publisher = {ACM},
	author = {Niu, Jianyu and Peng, Wei and Zhang, Xiaokuan and Zhang, Yinqian},
	month = nov,
	year = {2022},
	pages = {2385--2399},
	file = {Full Text:/Users/matthewberthoud/zotero/storage/M7F2EQUS/Niu et al. - 2022 - NARRATOR Secure and Practical State Continuity for Trusted Execution in the Cloud.pdf:application/pdf},
}

@misc{paulik_federated_2021,
	title = {Federated {Evaluation} and {Tuning} for {On}-{Device} {Personalization}: {System} {Design} \& {Applications}},
	shorttitle = {Federated {Evaluation} and {Tuning} for {On}-{Device} {Personalization}},
	url = {http://arxiv.org/abs/2102.08503},
	abstract = {We describe the design of our federated task processing system. Originally, the system was created to support two specific federated tasks: evaluation and tuning of on-device ML systems, primarily for the purpose of personalizing these systems. In recent years, support for an additional federated task has been added: federated learning (FL) of deep neural networks. To our knowledge, only one other system has been described in literature that supports FL at scale. We include comparisons to that system to help discuss design decisions and attached trade-offs. Finally, we describe two specific large scale personalization use cases in detail to showcase the applicability of federated tuning to on-device personalization and to highlight application specific solutions.},
	urldate = {2024-10-16},
	publisher = {arXiv},
	author = {Paulik, Matthias and Seigel, Matt and Mason, Henry and Telaar, Dominic and Kluivers, Joris and Dalen, Rogier van and Lau, Chi Wai and Carlson, Luke and Granqvist, Filip and Vandevelde, Chris and Agarwal, Sudeep and Freudiger, Julien and Byde, Andrew and Bhowmick, Abhishek and Kapoor, Gaurav and Beaumont, Si and Cahill, Áine and Hughes, Dominic and Javidbakht, Omid and Dong, Fei and Rishi, Rehan and Hung, Stanley},
	month = feb,
	year = {2021},
	note = {arXiv:2102.08503},
	keywords = {Computer Science - Machine Learning},
	file = {Preprint PDF:/Users/matthewberthoud/zotero/storage/ZDFJZI7R/Paulik et al. - 2021 - Federated Evaluation and Tuning for On-Device Personalization System Design & Applications.pdf:application/pdf;Snapshot:/Users/matthewberthoud/zotero/storage/SDNZCQB6/2102.html:text/html},
}

@misc{noauthor_project-oakoak_nodate,
	title = {project-oak/oak: {Meaningful} control of data in distributed systems.},
	url = {https://github.com/project-oak/oak},
	urldate = {2024-10-16},
	file = {project-oak/oak\: Meaningful control of data in distributed systems.:/Users/matthewberthoud/zotero/storage/ALE3VISA/oak.html:text/html},
}

@misc{noauthor_notitle_nodate,
	url = {https://ae.oreilly.com/OReilly_Technology_Trends_for_2024.pdf},
	urldate = {2024-12-16},
	file = {ae.oreilly.com/OReilly_Technology_Trends_for_2024.pdf:/Users/matthewberthoud/zotero/storage/6XGX2EV2/OReilly_Technology_Trends_for_2024.html:text/html},
	title = {Technology Trends for 2024: What O'Reilly Learning Platform Usage Tells Us About Where the Industry is Headed},
	shorttitle = {Technology Trends for 2024},
	author = {Loukides, Mike},
}


@inproceedings{zhao_last-level_2024,
	address = {La Jolla CA USA},
	title = {Last-{Level} {Cache} {Side}-{Channel} {Attacks} {Are} {Feasible} in the {Modern} {Public} {Cloud}},
	isbn = {9798400703850},
	url = {https://dl.acm.org/doi/10.1145/3620665.3640403},
	doi = {10.1145/3620665.3640403},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {Proceedings of the 29th {ACM} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}, {Volume} 2},
	publisher = {ACM},
	author = {Zhao, Zirui Neil and Morrison, Adam and Fletcher, Christopher W. and Torrellas, Josep},
	month = apr,
	year = {2024},
	pages = {582--600},
}

@inproceedings{zhao_everywhere_2024,
	address = {La Jolla CA USA},
	title = {Everywhere {All} at {Once}: {Co}-{Location} {Attacks} on {Public} {Cloud} {FaaS}},
	isbn = {9798400703720},
	shorttitle = {Everywhere {All} at {Once}},
	url = {https://dl.acm.org/doi/10.1145/3617232.3624867},
	doi = {10.1145/3617232.3624867},
	language = {en},
	urldate = {2024-12-11},
	booktitle = {Proceedings of the 29th {ACM} {International} {Conference} on {Architectural} {Support} for {Programming} {Languages} and {Operating} {Systems}, {Volume} 1},
	publisher = {ACM},
	author = {Zhao, Zirui Neil and Morrison, Adam and Fletcher, Christopher W. and Torrellas, Josep},
	month = apr,
	year = {2024},
	pages = {133--149},
}
